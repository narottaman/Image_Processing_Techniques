# -*- coding: utf-8 -*-
"""My_Image_Processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDScum9uBvce8rr_ujU094_R57pXKRz7
"""

from google.colab import drive
drive.mount('/content/drive')

from PIL import Image, ImageOps
import cv2
import numpy as np

original_image = Image.open('/content/drive/MyDrive/Colab Notebooks/Passport_img.jpg')

original_image

resized_image = original_image.resize((300, 300))

resized_image.save('OriginalImage.jpg')
resized_image

grayscale_image = ImageOps.grayscale(resized_image)
grayscale_image

grayscale_array = np.array(grayscale_image)
grayscale_array

blurred_image = cv2.GaussianBlur(grayscale_array, (5, 5), 0)
blurred_image

edges = cv2.Canny(blurred_image, 100, 200)
edges

edges_image = Image.fromarray(edges)


edges_image.save('processed_image.jpg')
edges_image

import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage import exposure

image = cv2.imread('/content/drive/MyDrive/Colab Notebooks/Passport_img.jpg')

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

normalized_image = gray_image / 255.0

equalized_image = cv2.equalizeHist((normalized_image * 255).astype(np.uint8))

normalized_equalized_image = equalized_image / 255.0


plt.figure(figsize=(12, 8))

plt.subplot(1, 3, 1)
plt.title("Original Image")
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title("Grayscale Image")
plt.imshow(gray_image, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title("Equalized & Normalized Image")
plt.imshow(normalized_equalized_image, cmap='gray')
plt.axis('off')

plt

from google.colab.patches import cv2_imshow
import cv2
import numpy as np


image = cv2.imread('/content/OriginalImage.jpg')

cv2_imshow(image)

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_image)

normalized_image = gray_image / 255.0
cv2_imshow((normalized_image * 255).astype(np.uint8))

equalized_image = cv2.equalizeHist(gray_image)
cv2_imshow(equalized_image)

blurred_image = cv2.GaussianBlur(equalized_image, (5, 5), 0)
blurred_gray_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

cv2_imshow(blurred_gray_image)

median_blurred_image = cv2.medianBlur(gray_image, 5)

cv2_imshow(median_blurred_image)

blurred_image = cv2.GaussianBlur(equalized_image, (5, 5), 0)
cv2_imshow(blurred_image)

edges = cv2.Sobel(blurred_image, cv2.CV_64F, 1, 0, ksize=5)
cv2_imshow((edges * 255).astype(np.uint8))

processed_image = (edges * 255).astype(np.uint8)
cv2_imshow( processed_image)

xray_image = cv2.imread('/content/OriginalImage.jpg', cv2.IMREAD_GRAYSCALE)


clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
equalized_xray = clahe.apply(xray_image)


laplacian = cv2.Laplacian(equalized_xray, cv2.CV_64F, ksize=5)

cv2_imshow(laplacian)

"""#Morphological Operations"""

# Define a kernel for morphological operations
kernel = np.ones((5, 5), np.uint8)

# Dilation
dilated_image = cv2.dilate(gray_image, kernel, iterations=1)
dilated_image

eroded_image = cv2.erode(gray_image, kernel, iterations=1)
eroded_image

opened_image = cv2.morphologyEx(gray_image, cv2.MORPH_OPEN, kernel)
opened_image

closed_image = cv2.morphologyEx(gray_image, cv2.MORPH_CLOSE, kernel)
closed_image

"""#Thresholding

"""

# Simple Thresholding
_, binary_image = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)

# Adaptive Thresholding
adaptive_thresh_image = cv2.adaptiveThreshold(gray_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
adaptive_thresh_image

"""#Contour Detection"""

# Find contours
contours, _ = cv2.findContours(binary_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Draw contours on the image
contour_image = cv2.drawContours(gray_image, contours, -1, (0, 255, 0), 2)
contour_image

"""#Rescaling and Resizing"""

# Resize image
resized_image = cv2.resize(gray_image, (256, 256))  # Resize to 256x256 pixels
resized_image

"""Image Registration"""

!pip install SimpleITK

"""Filtering

Feature Extraction
"""

from skimage.feature import canny

# Edge detection using Canny
edges_canny = canny(gray_image)

"""Segmentation

Object Detection and Classification

X-ray Image Processing
"""